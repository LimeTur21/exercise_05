---
title: "Exercise 05"
format: html
---
```{r setup, include= FALSE}
knitr::opts_chunk$set(warning= FALSE, message= FALSE)
```
## Challenge 1

### load libraries
```{r}
library(tidyverse)
library(ggplot2)
library(dplyr)
library(skimr)
library(reshape)
library(patchwork)
```

### loading in dataset as tibble
```{r}
x <- "https://raw.githubusercontent.com/LimeTur21/exercise_05/main/IMDB-movies.csv"
d <- as.tibble(read_csv(x, col_names= TRUE ))
```

### filtering dataset and adding 'decade' column
```{r}
d <- d |>
  filter((startYear>= 1920 & startYear<= 1979)) |>
  filter((runtimeMinutes>= 60 & runtimeMinutes<= 180)) |>
  mutate(decade= case_when(
    (startYear>= 1920 & startYear<= 1929) ~ "20s",
    (startYear>= 1930 & startYear<= 1939) ~ "30s",
    (startYear>= 1940 & startYear<= 1949) ~ "40s",
    (startYear>= 1950 & startYear<= 1959) ~ "50s",
    (startYear>= 1960 & startYear<= 1969) ~ "60s",
    (startYear>= 1970 & startYear<= 1979) ~ "70s"
  ))
```

### runtimeMinutes distribution histograms by decade
```{r}
runtimexdecade <- ggplot(d, aes(x= runtimeMinutes,
                                color= decade,
                                fill= decade)) +
  geom_histogram() +
  facet_wrap(vars(decade))
runtimexdecade
```

### new dataframe called 'results' that stores population mean and sd for 'runtimeMinutes'
```{r}
results <- summarise(group_by(d, decade), 
                     n_cases= n(), 
                     mu= mean(runtimeMinutes), 
                     sd= sd(runtimeMinutes), 
                     se= (sd/sqrt(n_cases)))
```

### 100 samples from each decade with mean and sd reported
```{r}
nsample <- 100
samples <- d |>
  group_by(decade) |>
  slice_sample(n= nsample, replace = FALSE) |>
  summarise(n_cases= n(), 
            mu_est= mean(runtimeMinutes), 
            sd_est= sd(runtimeMinutes), 
            se_samp= (sd_est/sqrt(nsample)))
```

### comparing population mu, sd, & se to sample stats
```{r}
compare <- tibble(decade= samples$decade,
                  pop_mu= results$mu, 
                  samp_mu= samples$mu_est, 
                  pop_sd= results$sd, 
                  samp_sd= samples$sd_est, 
                  pop_se= results$se, 
                  samp_se= samples$se_samp)
compare
```

### generating sampling distributions
```{r}
n_boot <- 1000 # number of permutations
boot_d <- d |> # creating a version of 'd' that only includes 'decade' and 'runtimeMinutes'
  group_by(decade) |>
  select(tconst, decade, runtimeMinutes) |>
  spread(key= decade, value= runtimeMinutes)
```

### empty lists to individually store 'runtimeMinutes' values by 'decade'
```{r}
boot_dist20 <- list()
boot_dist30 <- list()
boot_dist40 <- list()
boot_dist50 <- list()
boot_dist60 <- list()
boot_dist70 <- list()
```

### subsetting decade-specific tibble to remove rows with 'NA'
```{r}
samp20 <- boot_d |>
  select(2) |>
  subset(!is.na(boot_d[,2]))

samp30 <- boot_d |>
  select(3) |>
  subset(!is.na(boot_d[,3]))

samp40 <- boot_d |>
  select(4) |>
  subset(!is.na(boot_d[,4]))

samp50 <- boot_d |>
  select(5) |>
  subset(!is.na(boot_d[,5]))

samp60 <- boot_d |>
  select(6) |>
  subset(!is.na(boot_d[,6]))

samp70 <- boot_d |>
  select(7) |>
  subset(!is.na(boot_d[,7]))
```

### creating bootstrapped distributions of 1000 samples of 100 movies for each decade
```{r}
for (i in 1:n_boot){
  boot_dist20[[i]] <- samp20 |>
    slice_sample(n= nsample, replace= FALSE)
  boot_dist30[[i]] <- samp30 |>
    slice_sample(n= nsample, replace= FALSE)
  boot_dist40[[i]] <- samp40 |>
    slice_sample(n= nsample, replace= FALSE)
  boot_dist50[[i]] <- samp50 |>
    slice_sample(n= nsample, replace= FALSE)
  boot_dist60[[i]] <- samp60 |>
    slice_sample(n= nsample, replace= FALSE)
  boot_dist70[[i]] <- samp70 |>
    slice_sample(n= nsample, replace= FALSE)
}
```

### turning samples into sample means and returning those means to creating a bootstrapped sampling distribution of sample means
```{r}
for (i in 1:n_boot){
  boot_dist20[[i]]["sd"] <- sd(unlist(boot_dist20[[i]][1]))
  boot_dist30[[i]]["sd"] <- sd(unlist(boot_dist30[[i]][1]))
  boot_dist40[[i]]["sd"] <- sd(unlist(boot_dist40[[i]][1]))
  boot_dist50[[i]]["sd"] <- sd(unlist(boot_dist50[[i]][1]))
  boot_dist60[[i]]["sd"] <- sd(unlist(boot_dist60[[i]][1]))
  boot_dist70[[i]]["sd"] <- sd(unlist(boot_dist70[[i]][1]))
  
  boot_dist20[[i]][["mean"]] <- sum(boot_dist20[[i]][1])/nsample
  boot_dist30[[i]][["mean"]] <- sum(boot_dist30[[i]][1])/nsample
  boot_dist40[[i]][["mean"]] <- sum(boot_dist40[[i]][1])/nsample
  boot_dist50[[i]][["mean"]] <- sum(boot_dist50[[i]][1])/nsample
  boot_dist60[[i]][["mean"]] <- sum(boot_dist60[[i]][1])/nsample
  boot_dist70[[i]][["mean"]] <- sum(boot_dist70[[i]][1])/nsample
}
```

### create empty vectors for means and standard deviations of boostrapped sampling distribution of sample means
```{r}
boot_dist20_means <- vector()
boot_dist30_means <- vector()
boot_dist40_means <- vector()
boot_dist50_means <- vector()
boot_dist60_means <- vector()
boot_dist70_means <- vector()

boot_dist20_sds <- vector()
boot_dist30_sds <- vector()
boot_dist40_sds <- vector()
boot_dist50_sds <- vector()
boot_dist60_sds <- vector()
boot_dist70_sds <- vector()
```

### filling in boostrapped sampling distributions of means and sds for each decade
```{r}
for (i in 1:n_boot){
  boot_dist20_means[[i]] <- boot_dist20[[i]][["mean"]][[1]]
  boot_dist30_means[[i]] <- boot_dist30[[i]][["mean"]][[1]]
  boot_dist40_means[[i]] <- boot_dist40[[i]][["mean"]][[1]]
  boot_dist50_means[[i]] <- boot_dist50[[i]][["mean"]][[1]]
  boot_dist60_means[[i]] <- boot_dist60[[i]][["mean"]][[1]]
  boot_dist70_means[[i]] <- boot_dist70[[i]][["mean"]][[1]]
  
  boot_dist20_sds[[i]] <- boot_dist20[[i]][["sd"]][[1]]
  boot_dist30_sds[[i]] <- boot_dist30[[i]][["sd"]][[1]]
  boot_dist40_sds[[i]] <- boot_dist40[[i]][["sd"]][[1]]
  boot_dist50_sds[[i]] <- boot_dist50[[i]][["sd"]][[1]]
  boot_dist60_sds[[i]] <- boot_dist60[[i]][["sd"]][[1]]
  boot_dist70_sds[[i]] <- boot_dist70[[i]][["sd"]][[1]]
}
```

### calculating means and sds of each boostrapped sampling distribution of sample means
```{r}
meanof_boot_dist20_means <- mean(boot_dist20_means)
meanof_boot_dist30_means <- mean(boot_dist30_means)
meanof_boot_dist40_means <- mean(boot_dist40_means)
meanof_boot_dist50_means <- mean(boot_dist50_means)
meanof_boot_dist60_means <- mean(boot_dist60_means)
meanof_boot_dist70_means <- mean(boot_dist70_means)

sdof_boot_dist20_means<- sd(boot_dist20_means)
sdof_boot_dist30_means<- sd(boot_dist30_means)
sdof_boot_dist40_means<- sd(boot_dist40_means)
sdof_boot_dist50_means<- sd(boot_dist50_means)
sdof_boot_dist60_means<- sd(boot_dist60_means)
sdof_boot_dist70_means<- sd(boot_dist70_means)
```

### creating histograms to show boostrapped sampling distributions of sample means for each decade
```{r}
hist20 <- hist(boot_dist20_means, 
               xlab= "Bootstrapped Sample Runtime Means (min)", 
               main= "Boostrapped Sampling Distribution of Sample Runtime Means (20s)")
abline(v= meanof_boot_dist20_means, col= 'red', lwd= 3)
hist30 <- hist(boot_dist30_means, 
               xlab= "Bootstrapped Sample Runtime Means (min)", 
               main= "Boostrapped Sampling Distribution of Sample Runtime Means (30s)")
abline(v= meanof_boot_dist30_means, col= 'red', lwd= 3)
hist40 <- hist(boot_dist40_means, 
               xlab= "Bootstrapped Sample Runtime Means (min)", 
               main= "Boostrapped Sampling Distribution of Sample Runtime Means (40s)")
abline(v= meanof_boot_dist40_means, col= 'red', lwd= 3)
hist50 <- hist(boot_dist50_means, 
               xlab= "Bootstrapped Sample Runtime Means (min)", 
               main= "Boostrapped Sampling Distribution of Sample Runtime Means (50s)")
abline(v= meanof_boot_dist50_means, col= 'red', lwd= 3)
hist60 <- hist(boot_dist60_means, 
               xlab= "Bootstrapped Sample Runtime Means (min)", 
               main= "Boostrapped Sampling Distribution of Sample Runtime Means (60s)")
abline(v= meanof_boot_dist60_means, col= 'red', lwd= 3)
hist70 <- hist(boot_dist70_means, 
               xlab= "Bootstrapped Sample Runtime Means (min)", 
               main= "Boostrapped Sampling Distribution of Sample Runtime Means (70s)")
abline(v= meanof_boot_dist70_means, col= 'red', lwd= 3)
```

### standard error comparisons for each decade
```{r}
se20_first_samp <- (boot_dist20_sds[1]/sqrt(nsample))
se30_first_samp <- (boot_dist30_sds[1]/sqrt(nsample))
se40_first_samp <- (boot_dist40_sds[1]/sqrt(nsample))
se50_first_samp <- (boot_dist50_sds[1]/sqrt(nsample))
se60_first_samp <- (boot_dist60_sds[1]/sqrt(nsample))
se70_first_samp <- (boot_dist70_sds[1]/sqrt(nsample))

se_boot20 <- (mean(boot_dist20_sds)/sqrt(nsample))
se_boot30 <- (mean(boot_dist30_sds)/sqrt(nsample))
se_boot40 <- (mean(boot_dist40_sds)/sqrt(nsample))
se_boot50 <- (mean(boot_dist50_sds)/sqrt(nsample))
se_boot60 <- (mean(boot_dist60_sds)/sqrt(nsample))
se_boot70 <- (mean(boot_dist70_sds)/sqrt(nsample))
```

### adding se calculations to a tibble for comparison
#### pop_se_samp100 is the calculated se based on the population sd and a sample size of 100
#### samp_se is the calculated se based on the sd of the first 100-movie sample for each decade and a sample size of 100
#### boot_se is the calculated se based on the mean sd of the boostrapped sampling distributions of sample sds for each decade and a sample size of 100
```{r}
compare_se <- tibble(decade= compare$decade,
                     pop_se_100samp= (compare$pop_sd/sqrt(nsample)),
                     samp_se= compare$samp_se)
compare_se <- compare_se |>
  mutate(boot_se= case_when(
    decade== "20s" ~ se_boot20,
    decade== "30s" ~ se_boot30,
    decade== "40s" ~ se_boot40,
    decade== "50s" ~ se_boot50,
    decade== "60s" ~ se_boot60,
    decade== "70s" ~ se_boot70
    ))
compare_se
```

## CHALLENGE 2
### load data
```{r}
x2 <- "https://raw.githubusercontent.com/difiore/ada-2024-datasets/main/zombies.csv"
z <- read_csv(x2, col_names= TRUE)

summary(z)

N <- nrow(z)
```

### select relevant columns from dataframe then take their means and standard deviations (population)
```{r}
z_mut <<- z |>
  select(height, weight, age, zombies_killed, years_of_education, gender, id)
pop_mu_df <- (skim(z_mut))
pop_mu_df <- pop_mu_df[10]
pop_mu_df <- summarise(pop_mu_df,
                       mu_h= pop_mu_df[2,1],
                       mu_w= pop_mu_df[3,1],
                       mu_a= pop_mu_df[4,1],
                       mu_zk= pop_mu_df[5,1],
                       mu_yoe= pop_mu_df[6,1])

pop_sd_df <- (skim(z_mut))
pop_sd_df <- pop_sd_df[11]
pop_sd_df <- summarise(pop_sd_df, 
                       sd_h= pop_sd_df[2,1], 
                       sd_w= pop_sd_df[3,1], 
                       sd_a= pop_sd_df[4,1], 
                       sd_zk= pop_sd_df[5,1], 
                       sd_yoe= pop_sd_df[6,1])
```

### plotting each factor split by gender and QQ Plots to evaluate normality
```{r}
p <- ggplot(z_mut, aes(x= gender,
                       y= height,
                       fill= gender)) +
  geom_boxplot()

p1 <- ggplot(z_mut, aes(x= gender,
                       y= weight,
                       fill= gender)) +
  geom_boxplot()

p2 <- ggplot(z_mut, aes(x= gender,
                        y= age,
                        fill= gender)) +
  geom_boxplot()

p3 <- ggplot(z_mut, aes(x= gender,
                        y= zombies_killed,
                        fill= gender)) +
  geom_boxplot()

p4 <- ggplot(z_mut, aes(x= gender,
                        y= years_of_education,
                        fill= gender)) +
  geom_boxplot()

(p_all <- (p | p1)/(p2 | p3)/(p4) + plot_annotation(tag_levels= "A"))

s <- ggplot(z_mut, aes(x= age,
                       y= height,
                       color= gender)) +
  geom_point()

s1 <- ggplot(z_mut, aes(x= age,
                        y= weight,
                        color= gender)) +
  geom_point()
(s_wh <- (s / s1) + plot_annotation(tag_levels= "A"))

q <- qqnorm(z_mut[[1]], pch= 1, frame= FALSE, main= paste(colnames(z_mut[1]), "Normal QQ Plot", sep= " "))
qqline(z_mut[[1]], col= 'red', lwd= 2)
h <- hist(z_mut[[1]], main= paste("Histogram of", colnames(z_mut[1]), sep= " "))

q1 <- qqnorm(z_mut[[2]], pch= 1, frame= FALSE, main= paste(colnames(z_mut[2]), "Normal QQ Plot", sep= " "))
qqline(z_mut[[2]], col= 'red', lwd= 2)
h1 <- hist(z_mut[[2]], main= paste("Histogram of", colnames(z_mut[2]), sep= " "))

q2 <- qqnorm(z_mut[[3]], pch= 1, frame= FALSE, main= paste(colnames(z_mut[3]), "Normal QQ Plot", sep= " "))
qqline(z_mut[[3]], col= 'red', lwd= 2)
h2 <- hist(z_mut[[3]], main= paste("Histogram of", colnames(z_mut[3]), sep= " "))

q3 <- qqnorm(z_mut[[4]], pch= 1, frame= FALSE, main= paste(colnames(z_mut[4]), "Normal QQ Plot", sep= " "))
qqline(z_mut[[4]], col= 'red', lwd= 2)
h3 <- hist(z_mut[[4]], main= paste("Histogram of", colnames(z_mut[4]), sep= " "))

q4 <- qqnorm(z_mut[[5]], pch= 1, frame= FALSE, main= paste(colnames(z_mut[5]), "Normal QQ Plot", sep= " "))
qqline(z_mut[[5]], col= 'red', lwd= 2)
h4 <- hist(z_mut[[5]], main= paste("Histogram of", colnames(z_mut[5]), sep= " "))
```
##### It appears that both zombies killed and years of education are not normally distributed, and instead exhibit a Poisson-like distribution

### take a 50 datapoint sample and calulate mean, sd, and se for the sample, then generate a confidence interval
```{r}
samples <- z_mut[1:5]
samples <- samples |>
  slice_sample(n= 50, replace= FALSE)

samp_mus_ch2 <- colMeans(samples)
samp_sds_ch2 <- sapply(samples[1:5], sd)
samp_mus_sds_ch2 <- data.frame(samp_mus_ch2, samp_sds_ch2)
samp_mus_sds_ch2 <- samp_mus_sds_ch2 |>
  mutate(samp_ses_ch2= (samp_sds_ch2/sqrt(50)))

(lower <- samp_mus_ch2 + qnorm(0.05/2) * samp_mus_sds_ch2$samp_ses_ch2)
(upper <- samp_mus_ch2 + qnorm(0.05/2, lower.tail = FALSE) * samp_mus_sds_ch2$samp_ses_ch2)

ci <- tibble(lower, upper)

samp_mus_sds_ch2 <- samp_mus_sds_ch2 |>
  mutate(ci= paste(ci$lower, ci$upper, sep= ", "))
```

### take 199 more 50 datapoint samples and calculate mean, sd, and se for each variable
```{r}
num_samp <- 199
samp_size= 50

samp_dist_sum <- data.frame(samp_mu_h= numeric(num_samp),
                            samp_sd_h= numeric(num_samp),
                            samp_se_h= numeric(num_samp),
                            samp_mu_w= numeric(num_samp),
                            samp_sd_w= numeric(num_samp),
                            samp_se_w= numeric(num_samp),
                            samp_mu_a= numeric(num_samp),
                            samp_sd_a= numeric(num_samp),
                            samp_se_a= numeric(num_samp),
                            samp_mu_zk= numeric(num_samp),
                            samp_sd_zk= numeric(num_samp),
                            samp_se_zk= numeric(num_samp),
                            samp_mu_yoe= numeric(num_samp),
                            samp_sd_yoe= numeric(num_samp),
                            samp_se_yoe= numeric(num_samp))

for (i in 1:num_samp){
  sample_data <- slice_sample(z_mut, n= samp_size, replace= FALSE)
  
  # height
  samp_mu_h <- mean(sample_data$height)
  samp_sd_h <- sd(sample_data$height)
  samp_se_h <- samp_sd_h/sqrt(samp_size)
  
  # weight
  samp_mu_w <- mean(sample_data$weight)
  samp_sd_w <- sd(sample_data$weight)
  samp_se_w <- samp_sd_w/sqrt(samp_size)
  
  # age
  samp_mu_a <- mean(sample_data$age)
  samp_sd_a <- sd(sample_data$age)
  samp_se_a <- samp_sd_a/sqrt(samp_size)
  
  # zombies killed
  samp_mu_zk <- mean(sample_data$zombies_killed)
  samp_sd_zk <- sd(sample_data$zombies_killed)
  samp_se_zk <- samp_sd_zk/sqrt(samp_size)
  
  # years of education
  samp_mu_yoe <- mean(sample_data$years_of_education)
  samp_sd_yoe <- sd(sample_data$years_of_education)
  samp_se_yoe <- samp_sd_yoe/sqrt(samp_size)
  
  samp_dist_sum[i, ] <- c(samp_mu_h,
                          samp_sd_h,
                          samp_se_h,
                          samp_mu_w,
                          samp_sd_w,
                          samp_se_w,
                          samp_mu_a,
                          samp_sd_a,
                          samp_se_a,
                          samp_mu_zk,
                          samp_sd_zk,
                          samp_se_zk,
                          samp_mu_yoe,
                          samp_sd_yoe,
                          samp_se_yoe)
}
```
##### the standard deviations calculated by sampling distributions are a tiny bit larger than the sd caulcated for the single 50 datapoint sample

### find the mean and standard deviation for each sampling distribution of each variable
```{r}
samp_dist_samp_mus_ch2 <- sapply(c(samp_mu_h, samp_mu_w, samp_mu_a, samp_mu_zk, samp_mu_yoe), mean)
samp_dist_samp_mus_ch2 <- as_data_frame(samp_dist_samp_mus_ch2)

samp_dist_samp_sds_ch2 <- sapply(c(samp_sd_h, samp_sd_w, samp_sd_a, samp_sd_zk, samp_sd_yoe), mean)
samp_dist_samp_sds_ch2 <- as_data_frame(samp_dist_samp_sds_ch2)
```

### plot histograms of each sampling distribution of sample means
```{r}
hist(samp_dist_sum$samp_mu_h)
hist(samp_dist_sum$samp_mu_w)
hist(samp_dist_sum$samp_mu_a)
hist(samp_dist_sum$samp_mu_zk)
hist(samp_dist_sum$samp_mu_yoe)
```
##### all variable distributions look to be approximating a normal distribution, including zombies killed and years of education which were not previously normally distributed

### calculating confidence intervals for each sampling distribution of sample means for each variable and comparing against the calculated population confidence intervals
```{r}
lower_samp_h <- quantile(samp_dist_sum$samp_mu_h, 0.025)
upper_samp_h <- quantile(samp_dist_sum$samp_mu_h, 0.975)
lower_samp_w <- quantile(samp_dist_sum$samp_mu_w, 0.025)
upper_samp_w <- quantile(samp_dist_sum$samp_mu_w, 0.975)
lower_samp_a <- quantile(samp_dist_sum$samp_mu_a, 0.025)
upper_samp_a <- quantile(samp_dist_sum$samp_mu_a, 0.975)
lower_samp_zk <- quantile(samp_dist_sum$samp_mu_zk, 0.025)
upper_samp_zk <- quantile(samp_dist_sum$samp_mu_zk, 0.975)
lower_samp_yoe <- quantile(samp_dist_sum$samp_mu_yoe, 0.025)
upper_samp_yoe <- quantile(samp_dist_sum$samp_mu_yoe, 0.975)

ci_samp_h <- paste(lower_samp_h, upper_samp_h, sep= ", ")
ci_samp_w <- paste(lower_samp_w, upper_samp_w, sep= ", ")
ci_samp_a <- paste(lower_samp_a, upper_samp_a, sep= ", ")
ci_samp_zk <- paste(lower_samp_zk, upper_samp_zk, sep= ", ")
ci_samp_yoe <- paste(lower_samp_yoe, upper_samp_yoe, sep= ", ")
compare_cis <- data.frame(ci_samp_h, ci_samp_w, ci_samp_a, ci_samp_zk, ci_samp_yoe)

rownames(ci) <- c("height", "weight", "age", "zombies_killed", "years_of_education")
ci <- ci |>
  mutate(variable= rownames(ci))
(ci)
(compare_cis)
```
